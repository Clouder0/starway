from collections.abc import Callable
from typing import Annotated

import numpy
from numpy.typing import NDArray

class Context:
    def __init__(self) -> None: ...

class ServerEndpoint:
    @property
    def name(self) -> str: ...
    @property
    def local_addr(self) -> str: ...
    @property
    def local_port(self) -> int: ...
    @property
    def remote_addr(self) -> str: ...
    @property
    def remote_port(self) -> int: ...
    def view_transports(self) -> list[tuple[str, str]]: ...

class ServerSendFuture:
    def done(self) -> bool: ...
    def exception(self) -> str: ...

class ServerRecvFuture:
    def done(self) -> bool: ...
    def exception(self) -> str: ...
    def result(self) -> tuple[int, int]: ...

class Server:
    def __init__(self, ctx: Context) -> None: ...
    def set_accept_callback(self, callback: Callable[[ServerEndpoint], None]) -> None: ...
    def listen(self, addr: str, port: int) -> None: ...
    def close(self, callback: Callable[[], None]) -> None: ...
    def send(
        self,
        client_ep: ServerEndpoint,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        done_callback: Callable[[ServerSendFuture], None],
        fail_callback: Callable[[ServerSendFuture], None],
    ) -> ServerSendFuture: ...
    def recv(
        self,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        tag_mask: int,
        done_callback: Callable[[ServerRecvFuture], None],
        fail_callback: Callable[[ServerRecvFuture], None],
    ) -> ServerRecvFuture: ...
    def list_clients(self) -> set[ServerEndpoint]: ...

class ClientSendFuture:
    def done(self) -> bool: ...
    def exception(self) -> str: ...

class ClientRecvFuture:
    def done(self) -> bool: ...
    def exception(self) -> str: ...
    def result(self) -> tuple[int, int]: ...

class Client:
    def __init__(self, ctx: Context) -> None: ...
    def connect(
        self, addr: str, port: int, callback: Callable[[str], None]
    ) -> None: ...
    def close(self, callback: Callable[[], None]) -> None: ...
    def send(
        self,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        done_callback: Callable[[ClientSendFuture], None],
        fail_callback: Callable[[ClientSendFuture], None],
    ) -> ClientSendFuture: ...
    def recv(
        self,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        tag_mask: int,
        done_callback: Callable[[ClientRecvFuture], None],
        fail_callback: Callable[[ClientRecvFuture], None],
    ) -> ClientRecvFuture: ...
